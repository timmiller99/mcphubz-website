"use strict";(()=>{var e={};e.id=802,e.ids=[802],e.modules={53524:e=>{e.exports=require("@prisma/client")},72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},39491:e=>{e.exports=require("assert")},14300:e=>{e.exports=require("buffer")},32081:e=>{e.exports=require("child_process")},6113:e=>{e.exports=require("crypto")},82361:e=>{e.exports=require("events")},13685:e=>{e.exports=require("http")},95687:e=>{e.exports=require("https")},41808:e=>{e.exports=require("net")},63477:e=>{e.exports=require("querystring")},71576:e=>{e.exports=require("string_decoder")},24404:e=>{e.exports=require("tls")},57310:e=>{e.exports=require("url")},73837:e=>{e.exports=require("util")},59796:e=>{e.exports=require("zlib")},11397:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>g,patchFetch:()=>f,requestAsyncStorage:()=>h,routeModule:()=>m,serverHooks:()=>y,staticGenerationAsyncStorage:()=>w});var s={};t.r(s),t.d(s,{GET:()=>l});var i=t(49303),a=t(88716),n=t(60670),o=t(87070),c=t(22882),d=t(75571),u=t(95456);let p=new c.x;async function l(e){try{let r=await (0,d.getServerSession)(u.L);if(!r?.user?.id)return o.NextResponse.json({error:"Authentication required"},{status:401});let t=e.nextUrl.searchParams,s=parseInt(t.get("limit")||"50"),i=parseInt(t.get("offset")||"0"),a=await p.getCreditHistory(r.user.id,s,i);return o.NextResponse.json({success:!0,data:a})}catch(e){return console.error("Get credit history error:",e),o.NextResponse.json({error:"Failed to fetch credit history"},{status:500})}}let m=new i.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/credits/history/route",pathname:"/api/credits/history",filename:"route",bundlePath:"app/api/credits/history/route"},resolvedPagePath:"/home/user/webapp/src/app/api/credits/history/route.ts",nextConfigOutput:"export",userland:s}),{requestAsyncStorage:h,staticGenerationAsyncStorage:w,serverHooks:y}=m,g="/api/credits/history/route";function f(){return(0,n.patchFetch)({serverHooks:y,staticGenerationAsyncStorage:w})}},95456:(e,r,t)=>{t.d(r,{L:()=>c});var s=t(34217),i=t(77234),a=t(13539),n=t(75748),o=t(53524);let c={adapter:(0,a.N)(n.prisma),providers:[(0,s.Z)({clientId:process.env.GITHUB_CLIENT_ID,clientSecret:process.env.GITHUB_CLIENT_SECRET}),(0,i.Z)({clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET})],callbacks:{session:async({session:e,user:r})=>(e?.user&&(e.user.id=r.id),e),async signIn({user:e,account:r,profile:t}){if(!await n.prisma.user.findUnique({where:{email:e.email}})){let r=await n.prisma.user.create({data:{email:e.email,name:e.name,avatarUrl:e.image,githubUsername:t?.login,tier:o.UserTier.FREE,credits:10,preferredModel:"OPUS_4"}});await n.prisma.creditTransaction.create({data:{userId:r.id,type:o.TransactionType.SIGNUP_BONUS,amount:10,balance:10,description:"Welcome bonus - 10 free credits"}})}return!0}},pages:{signIn:"/auth/signin",error:"/auth/error"},session:{strategy:"jwt"}}},75748:(e,r,t)=>{t.d(r,{prisma:()=>i});var s=t(53524);let i=global.prisma||new s.PrismaClient({log:["error"]})},79534:(e,r,t)=>{t.d(r,{Fs:()=>n});var s=t(79984);let i=process.env.REDIS_URL||"redis://localhost:6379",a=(0,s.createClient)({url:i});a.on("error",e=>{console.error("Redis Client Error:",e)}),a.on("connect",()=>{console.log("Connected to Redis")}),a.connect().catch(console.error);let n={async get(e){try{a.isOpen||await a.connect();let r=await a.get(e);return r?JSON.parse(r):null}catch(e){return console.error("Cache get error:",e),null}},async set(e,r,t=3600){try{a.isOpen||await a.connect(),await a.setEx(e,t,JSON.stringify(r))}catch(e){console.error("Cache set error:",e)}},async del(e){try{a.isOpen||await a.connect(),await a.del(e)}catch(e){console.error("Cache delete error:",e)}},async flush(){try{a.isOpen||await a.connect(),await a.flushAll()}catch(e){console.error("Cache flush error:",e)}}}},22882:(e,r,t)=>{t.d(r,{x:()=>d});var s=t(75748),i=t(79534),a=t(53524);let n=new(t(58281)).Z(process.env.STRIPE_SECRET_KEY,{apiVersion:"2024-10-28.acacia"}),o={starter:{credits:50,price:5,name:"Starter Pack",description:"50 credits for casual use"},popular:{credits:200,price:15,name:"Popular Pack",description:"200 credits - Best value!",savings:5},pro:{credits:500,price:30,name:"Pro Pack",description:"500 credits for power users",savings:20}},c={[a.SubscriptionPlan.STARTER]:{monthlyCredits:100,price:9,name:"Starter",features:["100 credits/month","Access to Opus 4.1","Priority support","No credit rollover"]},[a.SubscriptionPlan.PREMIUM]:{monthlyCredits:500,price:29,name:"Premium",features:["500 credits/month","All premium models","Claude 3.5 Sonnet access","Credit rollover (up to 1000)","API access","Priority processing"]},[a.SubscriptionPlan.ENTERPRISE]:{monthlyCredits:2e3,price:99,name:"Enterprise",features:["2000 credits/month","All models","Unlimited rollover","Custom integrations","Dedicated support","SLA guarantee"]}};class d{async getUserCredits(e){let r=`user:credits:${e}`,t=await i.Fs.get(r);if(t)return t;let n=await s.prisma.user.findUnique({where:{id:e},select:{credits:!0,tier:!0,lifetimeCredits:!0,creditResetDate:!0}});if(!n)throw Error("User not found");let o=new Date;o.setDate(1),o.setHours(0,0,0,0);let c=await s.prisma.creditTransaction.aggregate({where:{userId:e,type:a.TransactionType.USAGE,createdAt:{gte:o}},_sum:{amount:!0}}),d={balance:n.credits,tier:n.tier,lifetimeUsed:n.lifetimeCredits,monthlyUsed:Math.abs(c._sum.amount||0),nextReset:n.creditResetDate};return await i.Fs.set(r,d,300),d}async purchaseCredits(e,r){let t=await s.prisma.user.findUnique({where:{id:e},select:{email:!0,stripeCustomerId:!0}});if(!t)throw Error("User not found");let i=o[r],a=t.stripeCustomerId;return a||(a=(await n.customers.create({email:t.email,metadata:{userId:e}})).id,await s.prisma.user.update({where:{id:e},data:{stripeCustomerId:a}})),{clientSecret:(await n.paymentIntents.create({amount:100*i.price,currency:"usd",customer:a,metadata:{userId:e,package:r,credits:i.credits.toString()},description:`${i.name} - ${i.credits} credits`})).client_secret,amount:i.price,credits:i.credits}}async grantCredits(e,r,t,a,n){let o=await s.prisma.$transaction(async s=>{let i=await s.user.update({where:{id:e},data:{credits:{increment:r}}}),o=await s.creditTransaction.create({data:{userId:e,type:t,amount:r,balance:i.credits,description:a,metadata:n}});return{user:i,transaction:o}});return await i.Fs.del(`user:credits:${e}`),o}async processSubscriptionRenewal(e,r){let t=await s.prisma.subscription.findUnique({where:{id:r},include:{user:!0}});if(!t)throw Error("Subscription not found");let i=c[t.plan],n=i.monthlyCredits;t.rolloverCredits&&t.user.credits>0?(t.plan===a.SubscriptionPlan.ENTERPRISE||(t.plan,a.SubscriptionPlan.PREMIUM),t.user.credits,i.monthlyCredits,n=i.monthlyCredits):await s.prisma.user.update({where:{id:e},data:{credits:0}}),await this.grantCredits(e,n,a.TransactionType.SUBSCRIPTION,`Monthly credit renewal - ${i.name} plan`,{subscriptionId:r}),await s.prisma.subscription.update({where:{id:r},data:{currentPeriodStart:new Date,currentPeriodEnd:new Date(Date.now()+2592e6)}}),await s.prisma.user.update({where:{id:e},data:{creditResetDate:new Date(Date.now()+2592e6)}})}async checkCreditLimit(e,r){let t=await s.prisma.user.findUnique({where:{id:e},select:{credits:!0}});if(!t)throw Error("User not found");return t.credits>=r}async getCreditHistory(e,r=50,t=0){let[i,a]=await Promise.all([s.prisma.creditTransaction.findMany({where:{userId:e},orderBy:{createdAt:"desc"},take:r,skip:t}),s.prisma.creditTransaction.count({where:{userId:e}})]);return{transactions:i,total:a,hasMore:t+r<a}}async grantBonusCredits(e,r,t,i){let n=await s.prisma.user.findUnique({where:{id:i},select:{role:!0}});if(!n||!["ADMIN","SUPER_ADMIN"].includes(n.role))throw Error("Unauthorized");return this.grantCredits(e,r,a.TransactionType.ADMIN_GRANT,t,{grantedBy:i})}async getCreditAnalytics(e,r=30){let t=new Date(Date.now()-864e5*r),[i,a,n]=await Promise.all([s.prisma.apiUsage.groupBy({by:["createdAt"],where:{userId:e,createdAt:{gte:t}},_sum:{creditsUsed:!0}}),s.prisma.apiUsage.groupBy({by:["model"],where:{userId:e,createdAt:{gte:t}},_sum:{creditsUsed:!0},_count:!0}),s.prisma.aiRequest.groupBy({by:["type"],where:{userId:e,createdAt:{gte:t}},_sum:{creditsUsed:!0},_count:!0})]);return{dailyUsage:i,byModel:a,byType:n,period:{start:t,end:new Date}}}}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[948,680,657,114],()=>t(11397));module.exports=s})();